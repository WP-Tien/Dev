import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { Popover, ToolbarGroup } from '@wordpress/components';
import { useSelect } from '@wordpress/data';
import { isCollapsed, getActiveFormats, useAnchorRef, store as richTextStore } from '@wordpress/rich-text';
/**
 * Internal dependencies
 */

import BlockControls from '../block-controls';
import FormatToolbar from './format-toolbar';
import { store as blockEditorStore } from '../../store';

function InlineSelectionToolbar(_ref) {
  let {
    value,
    anchorRef,
    activeFormats
  } = _ref;
  const lastFormat = activeFormats[activeFormats.length - 1];
  const lastFormatType = lastFormat === null || lastFormat === void 0 ? void 0 : lastFormat.type;
  const settings = useSelect(select => select(richTextStore).getFormatType(lastFormatType), [lastFormatType]);
  const selectionRef = useAnchorRef({
    ref: anchorRef,
    value,
    settings
  });
  return createElement(InlineToolbar, {
    anchorRef: selectionRef
  });
}

function InlineToolbar(_ref2) {
  let {
    anchorRef
  } = _ref2;
  return createElement(Popover, {
    position: "top center",
    focusOnMount: false,
    anchorRef: anchorRef,
    className: "block-editor-rich-text__inline-format-toolbar",
    __unstableSlotName: "block-toolbar"
  }, createElement("div", {
    className: "block-editor-rich-text__inline-format-toolbar-group"
  }, createElement(ToolbarGroup, null, createElement(FormatToolbar, null))));
}

const FormatToolbarContainer = _ref3 => {
  let {
    inline,
    anchorRef,
    value
  } = _ref3;
  const hasInlineToolbar = useSelect(select => select(blockEditorStore).getSettings().hasInlineToolbar, []);

  if (inline) {
    return createElement(InlineToolbar, {
      anchorRef: anchorRef
    });
  }

  if (hasInlineToolbar) {
    const activeFormats = getActiveFormats(value);

    if (isCollapsed(value) && !activeFormats.length) {
      return null;
    }

    return createElement(InlineSelectionToolbar, {
      anchorRef: anchorRef,
      value: value,
      activeFormats: activeFormats
    });
  } // Render regular toolbar.


  return createElement(BlockControls, {
    group: "inline"
  }, createElement(FormatToolbar, null));
};

export default FormatToolbarContainer;
//# sourceMappingURL=format-toolbar-container.js.map